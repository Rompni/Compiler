
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND CHARACTER COLON COMMA DIVIDE ELSE END EQ EQUAL FALSE FLOAT FOR GE GT ID IDTYPE IF INIT INTEGER LAND LBRACE LBRACKET LE LNOT LOR LPAREN LSHIFT LT MINUS MODULO NE NOT OR PERIOD PLUS PRINT RBRACE RBRACKET RPAREN RSHIFT SEMI STRING TIMES TRUE WHILE XORstart : INIT bodybody : LBRACE all_sentences RBRACEall_sentences : all_sentences list_sentences\n                    | sentencelist_sentences : sentencesentence : declaration\n                | function_dec\n                | assign\n                | emptydeclaration : IDTYPE ID SEMIboolean : TRUE\n                | FALSEoperator : LOR\n                | LAND\n                | LNOT\n                | LT\n                | GT\n                | LE\n                | GE\n                | EQ\n                | NEprint : PRINT tvariable SEMI\n            | PRINT ID SEMIexpression : tvariable operator tvariablefunction_cond : IF LPAREN expression RPAREN body\n                    | IF LPAREN expression RPAREN body ELSE bodyfunction_iter : iteration_statementiteration_statement : FOR LPAREN ID COLON ID RPAREN body\n                          | WHILE LPAREN expression RPAREN bodyfunction_dec : function_iter function_dec\n                    | function_cond function_dec\n                    | print\n                    | emptytvariable : STRING\n                 | ID\n                 | INTEGER\n                 | FLOAT\n                 | CHARACTER\n                 | booleanassign : IDTYPE ID EQUAL tvariable SEMI\n                | ID EQUAL tvariable SEMI\n                empty : '
    
_lr_action_items = {'INIT':([0,],[2,]),'$end':([1,3,21,],[0,-1,-2,]),'LBRACE':([2,53,65,71,72,],[4,4,4,4,4,]),'IDTYPE':([4,5,6,7,8,9,10,13,14,15,16,21,22,23,26,27,28,41,47,48,52,66,67,70,73,74,],[11,11,-4,-6,-7,-8,-9,-42,-42,-32,-27,-2,-3,-5,-30,-33,-31,-10,-22,-23,-41,-40,-25,-29,-26,-28,]),'ID':([4,5,6,7,8,9,10,11,13,14,15,16,18,21,22,23,25,26,27,28,29,39,40,41,42,47,48,52,54,55,56,57,58,59,60,61,62,63,64,66,67,70,73,74,],[12,12,-4,-6,-7,-8,-9,24,-42,-42,-32,-27,31,-2,-3,-5,43,-30,-33,-31,43,49,43,-10,43,-22,-23,-41,43,-13,-14,-15,-16,-17,-18,-19,-20,-21,69,-40,-25,-29,-26,-28,]),'RBRACE':([4,5,6,7,8,9,10,13,14,15,16,21,22,23,26,27,28,41,47,48,52,66,67,70,73,74,],[-42,21,-4,-6,-7,-8,-9,-42,-42,-32,-27,-2,-3,-5,-30,-33,-31,-10,-22,-23,-41,-40,-25,-29,-26,-28,]),'IF':([4,5,6,7,8,9,10,13,14,15,16,21,22,23,26,27,28,41,47,48,52,66,67,70,73,74,],[17,17,-4,-6,-7,-8,-9,17,17,-32,-27,-2,-3,-5,-30,-33,-31,-10,-22,-23,-41,-40,-25,-29,-26,-28,]),'PRINT':([4,5,6,7,8,9,10,13,14,15,16,21,22,23,26,27,28,41,47,48,52,66,67,70,73,74,],[18,18,-4,-6,-7,-8,-9,18,18,-32,-27,-2,-3,-5,-30,-33,-31,-10,-22,-23,-41,-40,-25,-29,-26,-28,]),'FOR':([4,5,6,7,8,9,10,13,14,15,16,21,22,23,26,27,28,41,47,48,52,66,67,70,73,74,],[19,19,-4,-6,-7,-8,-9,19,19,-32,-27,-2,-3,-5,-30,-33,-31,-10,-22,-23,-41,-40,-25,-29,-26,-28,]),'WHILE':([4,5,6,7,8,9,10,13,14,15,16,21,22,23,26,27,28,41,47,48,52,66,67,70,73,74,],[20,20,-4,-6,-7,-8,-9,20,20,-32,-27,-2,-3,-5,-30,-33,-31,-10,-22,-23,-41,-40,-25,-29,-26,-28,]),'EQUAL':([12,24,],[25,42,]),'LPAREN':([17,19,20,],[29,39,40,]),'STRING':([18,25,29,40,42,54,55,56,57,58,59,60,61,62,63,],[32,32,32,32,32,32,-13,-14,-15,-16,-17,-18,-19,-20,-21,]),'INTEGER':([18,25,29,40,42,54,55,56,57,58,59,60,61,62,63,],[33,33,33,33,33,33,-13,-14,-15,-16,-17,-18,-19,-20,-21,]),'FLOAT':([18,25,29,40,42,54,55,56,57,58,59,60,61,62,63,],[34,34,34,34,34,34,-13,-14,-15,-16,-17,-18,-19,-20,-21,]),'CHARACTER':([18,25,29,40,42,54,55,56,57,58,59,60,61,62,63,],[35,35,35,35,35,35,-13,-14,-15,-16,-17,-18,-19,-20,-21,]),'TRUE':([18,25,29,40,42,54,55,56,57,58,59,60,61,62,63,],[37,37,37,37,37,37,-13,-14,-15,-16,-17,-18,-19,-20,-21,]),'FALSE':([18,25,29,40,42,54,55,56,57,58,59,60,61,62,63,],[38,38,38,38,38,38,-13,-14,-15,-16,-17,-18,-19,-20,-21,]),'ELSE':([21,67,],[-2,71,]),'SEMI':([24,30,31,32,33,34,35,36,37,38,43,44,51,],[41,47,48,-34,-36,-37,-38,-39,-11,-12,-35,52,66,]),'LOR':([32,33,34,35,36,37,38,43,46,],[-34,-36,-37,-38,-39,-11,-12,-35,55,]),'LAND':([32,33,34,35,36,37,38,43,46,],[-34,-36,-37,-38,-39,-11,-12,-35,56,]),'LNOT':([32,33,34,35,36,37,38,43,46,],[-34,-36,-37,-38,-39,-11,-12,-35,57,]),'LT':([32,33,34,35,36,37,38,43,46,],[-34,-36,-37,-38,-39,-11,-12,-35,58,]),'GT':([32,33,34,35,36,37,38,43,46,],[-34,-36,-37,-38,-39,-11,-12,-35,59,]),'LE':([32,33,34,35,36,37,38,43,46,],[-34,-36,-37,-38,-39,-11,-12,-35,60,]),'GE':([32,33,34,35,36,37,38,43,46,],[-34,-36,-37,-38,-39,-11,-12,-35,61,]),'EQ':([32,33,34,35,36,37,38,43,46,],[-34,-36,-37,-38,-39,-11,-12,-35,62,]),'NE':([32,33,34,35,36,37,38,43,46,],[-34,-36,-37,-38,-39,-11,-12,-35,63,]),'RPAREN':([32,33,34,35,36,37,38,43,45,50,68,69,],[-34,-36,-37,-38,-39,-11,-12,-35,53,65,-24,72,]),'COLON':([49,],[64,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'body':([2,53,65,71,72,],[3,67,70,73,74,]),'all_sentences':([4,],[5,]),'sentence':([4,5,],[6,23,]),'declaration':([4,5,],[7,7,]),'function_dec':([4,5,13,14,],[8,8,26,28,]),'assign':([4,5,],[9,9,]),'empty':([4,5,13,14,],[10,10,27,27,]),'function_iter':([4,5,13,14,],[13,13,13,13,]),'function_cond':([4,5,13,14,],[14,14,14,14,]),'print':([4,5,13,14,],[15,15,15,15,]),'iteration_statement':([4,5,13,14,],[16,16,16,16,]),'list_sentences':([5,],[22,]),'tvariable':([18,25,29,40,42,54,],[30,44,46,46,51,68,]),'boolean':([18,25,29,40,42,54,],[36,36,36,36,36,36,]),'expression':([29,40,],[45,50,]),'operator':([46,],[54,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> INIT body','start',2,'p_start','parser.py',11),
  ('body -> LBRACE all_sentences RBRACE','body',3,'p_body','parser.py',16),
  ('all_sentences -> all_sentences list_sentences','all_sentences',2,'p_all_sentences','parser.py',20),
  ('all_sentences -> sentence','all_sentences',1,'p_all_sentences','parser.py',21),
  ('list_sentences -> sentence','list_sentences',1,'p_list_sentences','parser.py',25),
  ('sentence -> declaration','sentence',1,'p_sentence','parser.py',29),
  ('sentence -> function_dec','sentence',1,'p_sentence','parser.py',30),
  ('sentence -> assign','sentence',1,'p_sentence','parser.py',31),
  ('sentence -> empty','sentence',1,'p_sentence','parser.py',32),
  ('declaration -> IDTYPE ID SEMI','declaration',3,'p_declaration','parser.py',36),
  ('boolean -> TRUE','boolean',1,'p_booleans','parser.py',40),
  ('boolean -> FALSE','boolean',1,'p_booleans','parser.py',41),
  ('operator -> LOR','operator',1,'p_operators','parser.py',45),
  ('operator -> LAND','operator',1,'p_operators','parser.py',46),
  ('operator -> LNOT','operator',1,'p_operators','parser.py',47),
  ('operator -> LT','operator',1,'p_operators','parser.py',48),
  ('operator -> GT','operator',1,'p_operators','parser.py',49),
  ('operator -> LE','operator',1,'p_operators','parser.py',50),
  ('operator -> GE','operator',1,'p_operators','parser.py',51),
  ('operator -> EQ','operator',1,'p_operators','parser.py',52),
  ('operator -> NE','operator',1,'p_operators','parser.py',53),
  ('print -> PRINT tvariable SEMI','print',3,'p_print_statement','parser.py',57),
  ('print -> PRINT ID SEMI','print',3,'p_print_statement','parser.py',58),
  ('expression -> tvariable operator tvariable','expression',3,'p_expression','parser.py',63),
  ('function_cond -> IF LPAREN expression RPAREN body','function_cond',5,'p_function_condition','parser.py',67),
  ('function_cond -> IF LPAREN expression RPAREN body ELSE body','function_cond',7,'p_function_condition','parser.py',68),
  ('function_iter -> iteration_statement','function_iter',1,'p_function_iteration','parser.py',72),
  ('iteration_statement -> FOR LPAREN ID COLON ID RPAREN body','iteration_statement',7,'p_iteration_statement','parser.py',76),
  ('iteration_statement -> WHILE LPAREN expression RPAREN body','iteration_statement',5,'p_iteration_statement','parser.py',77),
  ('function_dec -> function_iter function_dec','function_dec',2,'p_function_declaration','parser.py',81),
  ('function_dec -> function_cond function_dec','function_dec',2,'p_function_declaration','parser.py',82),
  ('function_dec -> print','function_dec',1,'p_function_declaration','parser.py',83),
  ('function_dec -> empty','function_dec',1,'p_function_declaration','parser.py',84),
  ('tvariable -> STRING','tvariable',1,'p_tvariable','parser.py',88),
  ('tvariable -> ID','tvariable',1,'p_tvariable','parser.py',89),
  ('tvariable -> INTEGER','tvariable',1,'p_tvariable','parser.py',90),
  ('tvariable -> FLOAT','tvariable',1,'p_tvariable','parser.py',91),
  ('tvariable -> CHARACTER','tvariable',1,'p_tvariable','parser.py',92),
  ('tvariable -> boolean','tvariable',1,'p_tvariable','parser.py',93),
  ('assign -> IDTYPE ID EQUAL tvariable SEMI','assign',5,'p_assign','parser.py',97),
  ('assign -> ID EQUAL tvariable SEMI','assign',4,'p_assign','parser.py',98),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',103),
]
